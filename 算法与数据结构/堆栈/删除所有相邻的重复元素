方法一:堆栈法
root@ubuntu:/home/zhouping/anaconda3/pyLearn/algoDs# python 1
('finStr:', 'camonk')
('finStr:', 'm')
root@ubuntu:/home/zhouping/anaconda3/pyLearn/algoDs# cat 1
def removeAdjacentDuplicates(aStr):

    stkptr = -1
    i = 0
    lenStr = len(aStr)
    while i < lenStr:
        if stkptr == -1 or aStr[stkptr] != aStr[i]:
            stkptr += 1
            aStr[stkptr] = aStr[i]
            i += 1
        else:
            while i < lenStr and aStr[stkptr] == aStr[i]:
                i += 1
            stkptr -= 1

    aStr[stkptr+1] = None
    finStr = ''
    for a in aStr:
        if a is None:
            break
        else:
            finStr += a

    print('finStr:', finStr)

if __name__ == '__main__':
    for aStr in ['careermonk', 'mississippi']:
        removeAdjacentDuplicates(list(aStr))   
root@ubuntu:/home/zhouping/anaconda3/pyLearn/algoDs# 

方法二:迭代法
# Python program to remove all adjacent duplicates from a string 
  
# Recursively removes adjacent duplicates from str and returns 
# new string. las_removed is a pointer to last_removed character 
def removeUtil(string, last_removed): 
  
    # If length of string is 1 or 0 
    if len(string) == 0 or len(string) == 1: 
        return string 
  
    # Remove leftmost same characters and recur for remaining  
    # string 
    if string[0] == string[1]: 
        last_removed = ord(string[0]) 
        while len(string) > 1 and string[0] == string[1]: 
            string = string[1:] 
        string = string[1:] 
  
        return removeUtil(string, last_removed) 
  
    # At this point, the first character is definiotely different 
    # from its adjacent. Ignore first character and recursively  
    # remove characters from remaining string 
    rem_str = removeUtil(string[1:], last_removed) 
  
    # Check if the first character of the rem_string matches  
    # with the first character of the original string 
    if len(rem_str) != 0 and rem_str[0] == string[0]: 
        last_removed = ord(string[0]) 
        return (rem_str[1:]) 
  
    # If remaining string becomes empty and last removed character 
    # is same as first character of original string. This is needed 
    # for a string like "acbbcddc" 
    if len(rem_str) == 0 and last_removed == ord(string[0]): 
        return rem_str 
  
    # If the two first characters of str and rem_str don't match,  
    # append first character of str before the first character of  
    # rem_str. 
    return ([string[0]] + rem_str) 
  
def remove(string): 
    last_removed = 0
    return toString(removeUtil(toList(string), last_removed)) 
  
# Utility functions 
def toList(string): 
    x = [] 
    for i in string: 
        x.append(i) 
    return x 
  
def toString(x): 
    return ''.join(x) 
  
# Driver program 
string1 = "geeksforgeeg"
print remove(string1) 
  
string2 = "azxxxzy"
print remove(string2) 
  
string3 = "caaabbbaac"
print remove(string3) 
  
string4 = "gghhg"
print remove(string4) 
  
string5 = "aaaacddddcappp"
print remove(string5) 
  
string6 = "aaaaaaaaaa"
print remove(string6) 
  
string7 = "qpaaaaadaaaaadprq"
print remove(string7) 
  
string8 = "acaaabbbacdddd"
print remove(string8) 
  
string9 = "acbbcddc"
print remove(string9) 

https://www.geeksforgeeks.org/recursively-remove-adjacent-duplicates-given-string/
