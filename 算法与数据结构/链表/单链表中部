Find the middle of a given linked list 
Given a singly linked list, find middle of the linked list. For example, if given linked list is 1->2->3->4->5 then output should be 3.
If there are even nodes, then there would be two middle nodes, we need to print second middle element. For example, if given linked list is 1->2->3->4->5->6 then output should be 4.


Method 1:
Traverse the whole linked list and count the no. of nodes. Now traverse the list again till count/2 and return the node at count/2.

Method 2:
Traverse linked list using two pointers. Move one pointer by one and other pointer by two. 
When the fast pointer reaches end slow pointer will reach middle of the linked list.

#include<stdio.h>
#include<stdlib.h>
 
/* Link list node */
struct Node
{
    int data;
    struct Node* next;
};
 
/* Function to get the middle of the linked list*/
void printMiddle(struct Node *head)
{
    struct Node *slow_ptr = head;
    struct Node *fast_ptr = head;
 
    if (head!=NULL)
    {
        while (fast_ptr != NULL && fast_ptr->next != NULL)
        {
            fast_ptr = fast_ptr->next->next;
            slow_ptr = slow_ptr->next;
        }
        printf("The middle element is [%d]\n\n", slow_ptr->data);
    }
}
 
void push(struct Node** head_ref, int new_data)
{
    /* allocate node */
    struct Node* new_node =
        (struct Node*) malloc(sizeof(struct Node));
 
    /* put in the data  */
    new_node->data  = new_data;
 
    /* link the old list off the new node */
    new_node->next = (*head_ref);
 
    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}
 
// A utility function to print a given linked list
void printList(struct Node *ptr)
{
    while (ptr != NULL)
    {
        printf("%d->", ptr->data);
        ptr = ptr->next;
    }
    printf("NULL\n");
}
 
/* Drier program to test above function*/
int main()
{
    /* Start with the empty list */
    struct Node* head = NULL;
    int i;
 
    for (i=5; i>0; i--)
    {
        push(&head, i);
        printList(head);
        printMiddle(head);
    }
 
    return 0;
}
Run on IDE

Output:
5->NULL
The middle element is [5]

4->5->NULL
The middle element is [5]

3->4->5->NULL
The middle element is [4]

2->3->4->5->NULL
The middle element is [4]

1->2->3->4->5->NULL
The middle element is [3]

Method 3:
Initialize mid element as head and initialize a counter as 0. Traverse the list from head, while traversing increment 
the counter and change mid to mid->next whenever the counter is odd. So the mid will move only half of the total length of the list.


#include<stdio.h>
#include<stdlib.h>
 
/* Link list node */
struct node
{
    int data;
    struct node* next;
};
 
/* Function to get the middle of the linked list*/
void printMiddle(struct node *head)
{
    int count = 0;
    struct node *mid = head;
 
    while (head != NULL)
    {
        /* update mid, when 'count' is odd number */
        if (count & 1)
            mid = mid->next;
 
        ++count;
        head = head->next;
    }
 
    /* if empty list is provided */
    if (mid != NULL)
        printf("The middle element is [%d]\n\n", mid->data);
}
 
 
void push(struct node** head_ref, int new_data)
{
    /* allocate node */
    struct node* new_node =
        (struct node*) malloc(sizeof(struct node));
 
    /* put in the data  */
    new_node->data  = new_data;
 
    /* link the old list off the new node */
    new_node->next = (*head_ref);
 
    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}
 
// A utility function to print a given linked list
void printList(struct node *ptr)
{
    while (ptr != NULL)
    {
        printf("%d->", ptr->data);
        ptr = ptr->next;
    }
    printf("NULL\n");
}
 
/* Drier program to test above function*/
int main()
{
    /* Start with the empty list */
    struct node* head = NULL;
    int i;
 
    for (i=5; i>0; i--)
    {
        push(&head, i);
        printList(head);
        printMiddle(head);
    }
 
    return 0;
}
Run on IDE
Output:

5->NULL
The middle element is [5]

4->5->NULL
The middle element is [5]

3->4->5->NULL
The middle element is [4]

2->3->4->5->NULL
The middle element is [4]

1->2->3->4->5->NULL
The middle element is [3]

＃　Python实现
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLL:
    def __init__(self):
        self.head = None

    def __len__(self):
        count = 0
        curNode = self.head
        while curNode is not None:
            count += 1
            curNode = curNode.next
        return count

    def insert(self, data):
        if self.head is None:
            dNode = Node(data)
            self.head = dNode
        else:
            dNode = Node(data)
            dNode.next = self.head
            self.head = dNode

    def append(self, data):
        if self.head is None:
            dNode = Node(data)
            self.head = dNode
        else:
            dNode = Node(data)
            curNode = self.head
            while curNode is not None:
                preNode = curNode
                curNode = curNode.next

            preNode.next = dNode

    def delete(self):
        assert self.head is not None, "can not delete empty sll"
        if len(self) == 1:
            self.head = None
        elif len(self) == 2:
            self.head.next = None
        else:
            preNode = self.head
            curNode = self.head
            while curNode.next is not None:
                preNode = curNode
                curNode = curNode.next

            preNode.next = None

    def query(self):
        print("\r\n#######")
        curNode = self.head
        while curNode is not None:
            print(curNode.data),
            curNode = curNode.next


def printMiddle(head):

    slow_ptr = head
    fast_ptr = head
    if head is not None:
        while fast_ptr is not None and fast_ptr.next is not None:
            fast_ptr = fast_ptr.next.next
            slow_ptr = slow_ptr.next

        print('the middle element is ', slow_ptr.data)

def printMiddleNew(head):

    count = 0
    mid = head
    while head is not None:
        # update mid when count is odd number
        if count & 1:
            mid = mid.next

        count += 1
        head = head.next

    # if empty list is provided
    if mid is not None:
        print("The middle element is ", mid.data)

if __name__ == '__main__':
    sll = SLL()
    datas = ['a', 'b', 'c', 'd', 'e']
    for data in datas:
        sll.insert(data)
    sll.query()
    printMiddle(sll.head)

    sll = SLL()
    datas = ['a', 'b', 'c', 'd', 'e', 'f']
    for data in datas:
        sll.insert(data)
    sll.query()
    printMiddle(sll.head)

＃　输出
root@deepface-19:/data/zhouping/anaconda3/algoLearn# python midLL.py 

#######
e d c b a ('the middle element is ', 'c')

#######
f e d c b a ('the middle element is ', 'c')
root@deepface-19:/data/zhouping/anaconda3/algo
