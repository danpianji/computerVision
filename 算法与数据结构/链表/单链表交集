class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def getIntersectionNode(head1, head2):
    c1 = getCount(head1)
    c2 = getCount(head2)
    d = 0
    if c1 > c2:
        d = c1 - c2
        return _getIntersectionNode(d, head1, head2)
    else:
        d = c2 - c1
        return _getIntersectionNode(d, head2, head1)

def _getIntersectionNode(d, head1, head2):
    current1 = head1
    current2 = head2
    for i in range(0, d):
        if current1 is None:
            return -1
        current1 = current1.next

    while current1 is not None and current2 is not None:
        if current1 == current2:
            return current1.data
        current1 = current1.next
        current2 = current2.next

    return -1

def getCount(head):
    current = head
    count = 0
    while current is not None:
        count += 1
        current = current.next
    return count

def main():
    '''
    lst 3->6->6->15->30
    2nd 10->15->30
    '''

    head1 = Node(10)
    head2 = Node(3)
    
    newNode = Node(6)
    head2.next = newNode

    newNode = Node(9)
    head2.next.next = newNode

    newNode = Node(15)
    head1.next = newNode
    head2.next.next.next = newNode

    newNode = Node(30)
    head1.next.next = newNode

    head1.next.next.next = None
    
    item = getIntersectionNode(head1, head2)
    print('item:', item)

if __name__ == '__main__':
    main()

# 输出
15

# 参考
https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/
