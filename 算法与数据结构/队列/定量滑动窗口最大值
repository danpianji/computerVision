方法1:迭代法
def printMax(arr, n, k): 
    max = 0
    
    for i in range(n - k + 1): 
        max = arr[i] 
        for j in range(1, k): 
            if arr[i + j] > max: 
                max = arr[i + j] 
        print(str(max) + " ", end = "") 
  
# Driver method 
if __name__=="__main__": 
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
    n = len(arr) 
    k = 3
    printMax(arr, n, k) 
  
方法2:队列法
root@ubuntu1604:/data/zhouping/scripts/pylearn# python3 slidewindowmaxqueue.py 
78 90 90 90 89
root@ubuntu1604:/data/zhouping/scripts/pylearn# cat slidewindowmaxqueue.py 
from collections import deque 
  
# A Deque (Double ended queue) based  
# method for printing maximum element  
# of all subarrays of size k  
def printMax(arr, n, k): 
      
    """ Create a Double Ended Queue, Qi that  
    will store indexes of array elements.  
    The queue will store indexes of useful  
    elements in every window and it will 
    maintain decreasing order of values from 
    front to rear in Qi, i.e., arr[Qi.front[]] 
    to arr[Qi.rear()] are sorted in decreasing 
    order"""
    Qi = deque() 
      
    # Process first k (or first window)  
    # elements of array 
    for i in range(k): 
        
        # For every element, the previous  
        # smaller elements are useless 
        # so remove them from Qi 
        while Qi and arr[i] >= arr[Qi[-1]] : 
            Qi.pop() 
          
        # Add new element at rear of queue 
        Qi.append(i); 
          
    # Process rest of the elements, i.e.  
    # from arr[k] to arr[n-1] 
    for i in range(k, n): 
          
        # The element at the front of the 
        # queue is the largest element of 
        # previous window, so print it 
        print(str(arr[Qi[0]]) + " ", end = "") 
          
        # Remove the elements which are  
        # out of this window 
        while Qi and Qi[0] <= i-k: 
              
            # remove from front of deque 
            Qi.popleft()  
          
        # Remove all elements smaller than 
        # the currently being added element  
        # (Remove useless elements) 
        while Qi and arr[i] >= arr[Qi[-1]] : 
            Qi.pop() 
          
        # Add current element at the rear of Qi 
        Qi.append(i) 
      
    # Print the maximum element of last window 
    print(str(arr[Qi[0]])) 
      
# Driver programm to test above fumctions 
if __name__=="__main__": 
    arr = [12, 1, 78, 90, 57, 89, 56] 
    k = 3
    printMax(arr, len(arr), k) 
root@ubuntu1604:/data/zhouping/scripts/pylearn# 

方法3:最大堆
root@ubuntu1604:/data/zhouping/scripts/pylearn# cat slidewindowmaxheap.py 
import heapq 
  
# Method to find the maximum for each 
# and every contiguous subarray of s  
# of size k 
def max_of_all_in_k(arr, n): 
    i = 0
    j = k-1
      
    # Create the heap and heapify 
    heap = arr[i:j + 1] 
    heapq._heapify_max(heap) 
      
    # Print the maximum element from  
    # the first window of size k 
    print(heap[0], end =" ") 
    last = arr[i] 
    i+= 1
    j+= 1
    nexts = arr[j] 
      
    # For every remaining element 
    while j < n: 
          
        # Add the next element of the window 
        heap[heap.index(last)] = nexts 
          
        # Heapify to get the maximum  
        # of the current window 
        heapq._heapify_max(heap) 
          
        # Print the current maximum 
        print(heap[0], end =" ") 
        last = arr[i] 
        i+= 1
        j+= 1
        if j < n: 
            nexts = arr[j] 
              
# Driver Function 
n, k = 10, 3
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
max_of_all_in_k(arr, n) 
root@ubuntu1604:/data/zhouping/scripts/pylearn# python3 slidewindowmaxheap.py 
3 4 5 6 7 8 9 10 root@ubuntu1604:/data/zhouping/scripts/pylearn# 
root@ubuntu1604:/data/zhouping/scripts/pylearn# 

方法4:堆栈法
root@ubuntu1604:/data/zhouping/scripts/pylearn# python3 slidewindowmaxstack.py 
9 7 6 8 8 8 5 
root@ubuntu1604:/data/zhouping/scripts/pylearn# cat slidewindowmaxstack.py 
# Python3 implementation of the approach 
  
# Function to print the maximum for 
# every k size sub-array 
def print_max(a, n, k): 
      
    # max_upto array stores the index 
    # upto which the maximum element is a[i] 
    # i.e. max(a[i], a[i + 1], ... a[max_upto[i]]) = a[i] 
  
    max_upto=[0 for i in range(n)] 
  
    # Update max_upto array similar to 
    # finding next greater element 
    s=[] 
    s.append(0) 
  
    for i in range(1,n): 
        while (len(s) > 0 and a[s[-1]] < a[i]): 
            max_upto[s[-1]] = i - 1
            del s[-1] 
          
        s.append(i) 
  
    while (len(s) > 0): 
        max_upto[s[-1]] = n - 1
        del s[-1] 
  
    j = 0
    for i in range(n - k + 1): 
  
        # j < i is to check whether the 
        # jth element is outside the window 
        while (j < i or max_upto[j] < i + k - 1): 
            j += 1
        print(a[j], end=" ") 
    print()  
  
# Driver code 
  
a = [9, 7, 2, 4, 6, 8, 2, 1, 5] 
n = len(a) 
k = 3
print_max(a, n, k) 
root@ubuntu1604:/data/zhouping/scripts/pylearn# 

参考:
https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/
