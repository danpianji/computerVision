方法一:
迭代法
# Python3 program to reverse a queue  
from queue import Queue  
  
# Utility function to print the queue  
def Print(queue): 
    while (not queue.empty()): 
        print(queue.queue[0], end = ", ")  
        queue.get() 
  
# Function to reverse the queue  
def reversequeue(queue): 
    Stack = []  
    while (not queue.empty()):  
        Stack.append(queue.queue[0])  
        queue.get() 
    while (len(Stack) != 0):  
        queue.put(Stack[-1])  
        Stack.pop() 
  
# Driver code  
if __name__ == '__main__': 
    queue = Queue() 
    queue.put(10)  
    queue.put(20)  
    queue.put(30)  
    queue.put(40)  
    queue.put(50)  
    queue.put(60)  
    queue.put(70)  
    queue.put(80)  
    queue.put(90)  
    queue.put(100)  
  
    reversequeue(queue)  
    Print(queue) 
  
  方法二:递归法
  # Queue Class 
class Queue: 
    def __init__(self): 
        self.items = [] 
  
  
    def isEmpty(self): 
        return self.items == [] 
  
    def add(self, item): 
        self.items.append(item) 
  
    def pop(self): 
        return self.items.pop(0) 
  
    def front(self): 
        return self.items[0] 
  
    def printQueue(self): 
        for i in self.items: 
            print(i, end =" ") 
        print("") 
  
  
# Recursive Function to reverse the queue 
def reverseQueue(q): 
  
    # Base case 
    if (q.isEmpty()): 
        return
  
    # Dequeue current item (from front)  
    data = q.front(); 
    q.pop(); 
  
    # Reverse remaining queue   
    reverseQueue(q) 
  
    # Enqueue current item (to rear)   
    q.add(data) 
  
  
# Driver Code 
q = Queue() 
q.add(56) 
q.add(27) 
q.add(30) 
q.add(45) 
q.add(85) 
q.add(92) 
q.add(58) 
q.add(80) 
q.add(90) 
q.add(100) 
reverseQueue(q) 
q.printQueue() 

参考:
https://www.geeksforgeeks.org/reversing-a-queue/
https://www.geeksforgeeks.org/reversing-queue-using-recursion/
