In [1]: %paste
def sample():
    n = 0
    # closure function
    def func():
        print('n=', n)

    # accessor methods for n
    def get_n():
        return n

    def set_n(value):
        nonlocal n
        n = value

    # attach as function attributes
    func.get_n = get_n
    func.set_n = set_n
    return func

f = sample()
f()
f.set_n(10)
f()
f.get_n()

## -- End pasted text --
n= 0
n= 10
Out[1]: 10

In [2]:

In [2]:

In [2]:

In [2]: %paste
import sys
class ClosureInstance:
    def __init__(self, locals=None):
        if locals is None:
            locals = sys._getframe(1).f_locals

        # update instance dict with callable
        self.__dict__.update((key, value) for key, value in locals.items() if callable(value))

    # redirect special methods
    def __len__(self):
        return self.__dict__['__len__']()

def Stack():
    items = []
    def push(item):
        items.append(item)

    def  pop():
        return items.pop()

    def __len__():
        return len(items)

    return ClosureInstance()

s = Stack()
s
s.push(10)
s.push(20)
s.push('Hello')
len(s)
s.pop()
s.pop()
s.pop()
## -- End pasted text --
Out[2]: 10

In [4]: from timeit import timeit

In [5]: S = Stack()

In [6]: timeit('s.push(1);s.pop()', 'from __main__ import s')
Out[6]: 0.5046625

In [7]: %paste
class Stack2:
    def __init__(self):
         self.items = []

    def push(self,  item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def __len__(self):
        return len(self.items)

## -- End pasted text --

In [8]: s = Stack2()

In [9]: timeit('s.push(1);s.pop()', 'from __main__ import s')
Out[9]: 0.623408100000006

In [10]:                                                                            
