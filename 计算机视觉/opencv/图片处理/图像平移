1. 简单平移(原图变小）
import cv2
import numpy as np

img = cv2.imread('800.jpg')
num_rows, num_cols = img.shape[:2]
translation_matrix = np.float32([[1,0,70], [0,1,110]]) # 70 mean col, 110 mean row
img_translation = cv2.warpAffine(img, translation_matrix, (num_cols, num_rows), cv2.INTER_LINEAR)
cv2.namedWindow("Translation", cv2.WINDOW_NORMAL)
cv2.imshow('Translation', img_translation)
cv2.waitKey()

2. 简单平移（原图保持大小）
import cv2
import numpy as np

img = cv2.imread('800.jpg')
num_rows, num_cols = img.shape[:2]
translation_matrix = np.float32([[1,0,70], [0,1,110]])
img_translation = cv2.warpAffine(img, translation_matrix, (num_cols+70, num_rows+110), cv2.INTER_LINEAR)
cv2.namedWindow("Translation", cv2.WINDOW_NORMAL)
cv2.imshow('Translation', img_translation)
cv2.waitKey()

3. 简单平移（移动到中间）
import cv2
import numpy as np

img = cv2.imread('800.jpg')
num_rows, num_cols = img.shape[:2]
translation_matrix = np.float32([[1,0,70], [0,1,110]])
img_translation = cv2.warpAffine(img, translation_matrix, (num_cols+70, num_rows+110), cv2.INTER_LINEAR)
translation_matrix = np.float32([[1,0,-30],[0,1,-50]])
img_translation = cv2.warpAffine(img_translation, translation_matrix, (num_cols+70+30, num_rows+110+50))
cv2.namedWindow("Translation", cv2.WINDOW_NORMAL)
cv2.imshow('Translation', img_translation)
cv2.waitKey()

4. 简单平移（空白区域被填充）
import cv2
import numpy as np

img = cv2.imread('800.jpg')
num_rows, num_cols = img.shape[:2]
translation_matrix = np.float32([[1,0,70], [0,1,110]])
img_translation = cv2.warpAffine(img, translation_matrix, (num_cols+70, num_rows+110), cv2.INTER_LINEAR, cv2.BORDER_WRAP, 1)
translation_matrix = np.float32([[1,0,-30],[0,1,-50]])
img_translation = cv2.warpAffine(img_translation, translation_matrix, (num_cols+70+30, num_rows+110+50), cv2.INTER_LINEAR, cv2.BORDER_WRAP, 1)
cv2.namedWindow("Translation", cv2.WINDOW_NORMAL)
cv2.imshow('Translation', img_translation)
cv2.waitKey()

5. 右下移动
import numpy as np
import argparse
import imutils
import cv2

ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
        help="Path to the image")
args = vars(ap.parse_args())

image = cv2.imread(args["image"])
cv2.imshow("Original", image)

M = np.float32([[1, 0, 25], [0, 1, 50]]) #25代表右移， 50代表下移
shifted = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]))
cv2.imshow("Shifted Down and Right", shifted)

6. 左上移动
M = np.float32([[1, 0, -50], [0, 1, -90]])#-50代表左移， -90代表上移
shifted = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]))
cv2.imshow("Shifted up and left", shifted)

7. 仅仅下移
M = np.float32([[1, 0, 0], [0, 1, 100]]) #100代表下移
shifted = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]))
cv2.imshow("Shifted Down", shifted)

8. 仅仅下移（封装函数）
shiftd = imutils.translate(image, 0, 100)
cv2.imshow("Shifted Down Other", shifted)
cv2.waitKey(0)

# imutils.py
import numpy as np
import cv2

def translate(image, x, y):
    M = np.float32([[1, 0, x], [0, 1, y]])
    shifted = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]))
    return shifted
