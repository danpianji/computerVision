import cv2
import os
import fnmatch
import re

def gen_find(filepat, top):
    '''
    Find all filenames in a directory tree that match a shell wildcard pattern
    '''
    for path, dirlist, filelist in os.walk(top):
        for name in fnmatch.filter(filelist, filepat):
            yield os.path.join(path,name)

def splitImg(im, part=None, index=None):

    if part == 6:
        y1_0 = 0
        y2_0 =int(1.0/2*height)
        x1_0 = 0
        x2_0 = int(1.0/3*width)

        y1_1 = 0
        y2_1 = int(1.0/2*height)
        x1_1 = int(1.0/3*width)
        x2_1 = int(2.0/3*width)

        y1_2 = 0
        y2_2 = int(1.0/2*height)
        x1_2 = int(2.0/3*width)
        x2_2 = width

        y1_3 = int(1.0/2*height)
        y2_3 = height
        x1_3 = 0
        x2_3 = int(1.0/3*width)

        y1_4 = int(1.0/2*height)
        y2_4 = height
        x1_4 = int(1.0/3*width)
        x2_4 = int(2.0/3*width)

        y1_5 = int(1.0/2*height)
        y2_5 = height
        x1_5 = int(1.0/2*height)
        x2_5 = width

        i0 = im[y1_0:y2_0,x1_0:x2_0]
        i1 = im[y1_1:y2_1,x1_1:x2_1]
        i2 = im[y1_2:y2_2,x1_2:x2_2]
        i3 = im[y1_3:y2_3,x1_3:x2_3]
        i4 = im[y1_4:y2_4,x1_4:x2_4]
        i5 = im[y1_5:y2_5,x1_5:x2_5]

        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_0,y2_0,x1_0,x2_0, index), i0)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_1,y2_1,x1_1,x2_1, index), i1)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_2,y2_2,x1_2,x2_2, index), i2)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_3,y2_3,x1_3,x2_3, index), i3)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_4,y2_4,x1_4,x2_4, index), i4)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_5,y2_5,x1_5,x2_5, index), i5)
    else:
        y1_0 = 0
        y2_0 =int( 0.5*height)
        x1_0 = 0
        x2_0 = int(0.5*width)

        y1_1 = 0
        y2_1 = int( 0.5*height)
        x1_1 = int(0.5*width)
        x2_1 = width

        y1_2 = int(0.5*height)
        y2_2 = height
        x1_2 = 0
        x2_2 = int(0.5*width)


        y1_3 = int(0.5*height)
        y2_3 = height
        x1_3 = int(0.5*width)
        x2_3 = width

        i0 = im[y1_0:y2_0,x1_0:x2_0]
        i1 = im[y1_1:y2_1,x1_1:x2_1]
        i2 = im[y1_2:y2_2,x1_2:x2_2]
        i3 = im[y1_3:y2_3,x1_3:x2_3]

        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_0,y2_0,x1_0,x2_0, index), i0)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_1,y2_1,x1_1,x2_1, index), i1)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_2,y2_2,x1_2,x2_2, index), i2)
        cv2.imwrite("crop/{}_{}_{}_{}_{}.jpg".format(y1_3,y2_3,x1_3,x2_3, index), i3)

imgs = gen_find("*.jpg", ".")
for index, img in enumerate(imgs):
    im = cv2.imread(img)
    height, width, _ = im.shape
    match = re.search(r"\./\d+x\d+_(\d+)", img)
    if not match:
        continue
    gid = match.group(1)
    splitImg(im, part=int(gid), index=index)
